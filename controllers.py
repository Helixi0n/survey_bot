from telebot import types
from models import Model

title = ''
description = ''
question = ''
survey_id_in_work = 0

class Controller:
    def __init__(self, bot):
        self.bot = bot

    def register_handlers(self):
        @self.bot.message_handler(commands=['start'])
        def start(message):
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            buttons = [
                types.InlineKeyboardButton('–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å', callback_data='complete_survey'),
                types.InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å', callback_data='add_survey'),
                types.InlineKeyboardButton('–ú–æ–∏ –æ–ø—Ä–æ—Å—ã', callback_data='my_surveys')
            ]
            keyboard.add(*buttons)

            self.bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç! üòÄ \n–≠—Ç–æ –±–æ—Ç-–æ–ø—Ä–æ—Å–Ω–∏–∫. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –æ–ø—Ä–æ—Å—ã –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –æ–ø—Ä–æ—Å—ã –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π. \n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)


        @self.bot.callback_query_handler(func=lambda callback: callback.data == 'main_menu')
        def main_menu(callback):
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            buttons = [
                types.InlineKeyboardButton('–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å', callback_data='complete_survey'),
                types.InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å', callback_data='add_survey'),
                types.InlineKeyboardButton('–ú–æ–∏ –æ–ø—Ä–æ—Å—ã', callback_data='my_surveys')
            ]
            keyboard.add(*buttons)

            self.bot.edit_message_text(f'–ü—Ä–∏–≤–µ—Ç! üòÄ \n–≠—Ç–æ –±–æ—Ç-–æ–ø—Ä–æ—Å–Ω–∏–∫. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –æ–ø—Ä–æ—Å—ã –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –æ–ø—Ä–æ—Å—ã –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π. \n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', callback.message.chat.id, callback.message.id, reply_markup=keyboard)


        @self.bot.callback_query_handler(func=lambda callback: callback.data == 'my_surveys')
        def my_surveys(callback):
            my_surveys_list = Model.get_my_survey_list(callback.message.chat.id)
            reply = f'–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –æ–ø—Ä–æ—Å–æ–≤:'
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            buttons = []

            if my_surveys_list:
                for survey in my_surveys_list:
                    buttons.append(types.InlineKeyboardButton(survey[0], callback_data=f'survey_{survey[1]}'))

            else:
                reply = '–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞'
                buttons.append(types.InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å', callback_data='add_survey'))

            buttons.append(types.InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu'))

            keyboard.add(*buttons)
            self.bot.edit_message_text(reply, callback.message.chat.id, callback.message.id, reply_markup=keyboard)

        @self.bot.callback_query_handler(func=lambda callback: callback.data.startswith('survey_'))
        def my_survey(callback):
            survey = Model.my_survey(int(callback.data[7:]))
            reply = f'ID: {survey.id} \n–ù–∞–∑–≤–∞–Ω–∏–µ: {survey.title} \n–û–ø–∏—Å–∞–Ω–∏–µ: {survey.description} \n–ü—Ä–æ—à–ª–æ —á–µ–ª–æ–≤–µ–∫: {survey.passed} \n \n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            buttons = [
            types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø—Ä–æ—Å', callback_data=f'update_survey_{survey.id}'),
            types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å', callback_data=f'delete_survey_{survey.id}'),
            types.InlineKeyboardButton('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞', callback_data=f'results_{survey.id}'),
            types.InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')
            ]
            keyboard.add(*buttons)

            self.bot.edit_message_text(reply, callback.message.chat.id, callback.message.id, reply_markup=keyboard)

        @self.bot.callback_query_handler(func=lambda callback: callback.data.startswith('delete_survey_'))
        def delete_survey(callback):
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            buttons = [
            types.InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')
            ]
            keyboard.add(*buttons)

            Model.delete_survey(int(callback.data[14:]))

            self.bot.edit_message_text('–û–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω. \n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', callback.message.chat.id, callback.message.id, reply_markup=keyboard)

        
        @self.bot.callback_query_handler(func=lambda callback: callback.data.startswith('update_survey_'))
        def update_survey(callback):
            msg = self.bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:')
            self.bot.register_next_step_handler(msg, lambda m: self.get_question_title(m))

        @self.bot.callback_query_handler(func=lambda callback: callback.data == 'add_survey')
        def add_survey(callback):
            msg = self.bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ–ø—Ä–æ—Å–∞:', callback.message.chat.id, callback.message.id)
            self.bot.register_next_step_handler(msg, lambda m: self.title_text(m))
            

    def title_text(self, message):
        global title
        title = message.text
        msg = self.bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ–ø—Ä–æ—Å–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):')
        self.bot.register_next_step_handler(msg, lambda m: self.description_text(m))


    def description_text(self, message):
        global description
        description = message.text

        keyboard = types.InlineKeyboardMarkup(row_width=1)
        buttons = [types.InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å', callback_data='add_survey'), 
                    types.InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]
        keyboard.add(*buttons)

        Model.add_survey(title=title, description=description, user_id=message.chat.id)
        self.bot.send_message(message.chat.id, '–û–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω! \n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)

    
    def get_question_title(self, message):
        global question
        question = message.text

        msg = self.bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ (–∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ):')
        self.bot.register_next_step_handler(msg, lambda m: self.get_answers)

    def get_answers(self, message):
        answers = message.split('\n')

        